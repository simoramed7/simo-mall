{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user.actions';\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapShot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapShot.id,\n      ...userSnapShot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["C:/Users/medra/simo-mall/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","getSnapShotFromUserAuth","userAuth","userRef","userSnapShot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest , put, all, call} from 'redux-saga/effects';\r\nimport UserActionTypes from './user.types';\r\nimport {googleProvider, auth, createUserProfileDocument, getCurrentUser} from '../../firebase/firebase.utils';\r\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure  } from './user.actions';\r\n\r\nexport function* getSnapShotFromUserAuth(userAuth) {\r\n    try{\r\n    const userRef = yield call(createUserProfileDocument,userAuth);\r\n    const userSnapShot = yield userRef.get();\r\n    yield put (signInSuccess({ id:userSnapShot.id,...userSnapShot.data() }) );\r\n    } catch (error) {\r\n        yield put( signInFailure(error) );\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\ntry{\r\n    const {user} = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapShotFromUserAuth(user)\r\n    } catch (error) {\r\n        yield put( signInFailure(error) );\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail( {payload : {email,password}} ) {\r\n    try{\r\n        const {user} = yield auth.signInWithEmailAndPassword(email,password);\r\n        yield getSnapShotFromUserAuth(user)\r\n        } catch (error) {\r\n            yield put( signInFailure(error) );\r\n        }\r\n    }\r\n\r\nexport function* isUserAuthenticated(){\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if (!userAuth) return;\r\n        yield getSnapShotFromUserAuth(userAuth);\r\n    } catch (error){\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signOut(){\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess())\r\n    } catch (error){\r\n        yield put(signOutFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle )\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START ,signInWithEmail )\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated)\r\n}\r\n\r\nexport function* onSignOutStart (){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START,signOut)\r\n}\r\n\r\nexport function* userSagas(){\r\n    yield all([ call(onGoogleSignInStart),call(onEmailSignInStart), call(isUserAuthenticated),call(onSignOutStart) ]);\r\n}"]},"metadata":{},"sourceType":"module"}