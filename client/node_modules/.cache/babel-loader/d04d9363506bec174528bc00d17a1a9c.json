{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollctionsSuccess, fetchCollctionsFailure } from './shop.actions';\nimport shopActionType from './shop.types';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapShotToMap, snapshot);\n    yield put(fetchCollctionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollctionsFailure(error.message));\n  } // previous format while using thunk methode \n  //collectionRef.get().then(snapshot => {\n  // const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n  //  dispatch( fetchCollctionsSuccess(collectionsMap) );\n  // }).catch(error => dispatch( fetchCollctionsFailure(error.message) ));\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(shopActionType.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["C:/Users/medra/simo-mall/client/src/redux/shop/shop.sagas.js"],"names":["takeLatest","put","call","all","firestore","convertCollectionsSnapShotToMap","fetchCollctionsSuccess","fetchCollctionsFailure","shopActionType","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA6BC,GAA7B,QAAuC,oBAAvC;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAAQC,sBAAR,EAA+BC,sBAA/B,QAA4D,gBAA5D;AAEA,OAAOC,cAAP,MAA2B,cAA3B;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,MAAG;AACH,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,+BAAD,EAAiCO,QAAjC,CAAjC;AACA,UAAMX,GAAG,CAACK,sBAAsB,CAACQ,cAAD,CAAvB,CAAT;AACH,GALG,CAKF,OAAMC,KAAN,EAAY;AACV,UAAMd,GAAG,CAACM,sBAAsB,CAACQ,KAAK,CAACC,OAAP,CAAvB,CAAT;AACH,GARuC,CAShC;AACA;AACC;AACA;AACD;;AACP;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMjB,UAAU,CAACQ,cAAc,CAACU,uBAAhB,EAAwCT,qBAAxC,CAAhB;AACH;AAED,OAAO,UAAUU,SAAV,GAAsB;AACzB,QAAMhB,GAAG,CAAC,CAACD,IAAI,CAACe,qBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import {takeLatest,put, call,all} from 'redux-saga/effects';\r\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils';\r\nimport {fetchCollctionsSuccess,fetchCollctionsFailure} from './shop.actions';\r\n\r\nimport shopActionType from './shop.types';\r\n\r\nexport function* fetchCollectionsAsync(){\r\n    try{ \r\n    const collectionRef = firestore.collection('collections');\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionsMap = yield call(convertCollectionsSnapShotToMap,snapshot);\r\n    yield put(fetchCollctionsSuccess(collectionsMap));\r\n} catch(error){\r\n    yield put(fetchCollctionsFailure(error.message));\r\n}\r\n        // previous format while using thunk methode \r\n        //collectionRef.get().then(snapshot => {\r\n         // const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\r\n         //  dispatch( fetchCollctionsSuccess(collectionsMap) );\r\n        // }).catch(error => dispatch( fetchCollctionsFailure(error.message) ));\r\n}\r\n\r\nexport function* fetchCollectionsStart(){\r\n    yield takeLatest(shopActionType.FETCH_COLLECTIONS_START,fetchCollectionsAsync)\r\n}\r\n\r\nexport function* shopSagas() {\r\n    yield all([call(fetchCollectionsStart)]);\r\n  }"]},"metadata":{},"sourceType":"module"}