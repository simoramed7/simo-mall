{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nexport function* getSnapShotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapShot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapShot.id,\n      ...userSnapShot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapShotFromUserAuth(user, additionalData);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/medra/simo-mall/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","getSnapShotFromUserAuth","userAuth","additionalData","userRef","userSnapShot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest , put, all, call} from 'redux-saga/effects';\r\nimport UserActionTypes from './user.types';\r\nimport {googleProvider, auth, createUserProfileDocument, getCurrentUser} from '../../firebase/firebase.utils';\r\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure,signUpSuccess,signUpFailure  } from './user.actions';\r\n\r\nexport function* getSnapShotFromUserAuth(userAuth,additionalData) {\r\n    try{\r\n    const userRef = yield call(createUserProfileDocument,userAuth,additionalData);\r\n    const userSnapShot = yield userRef.get();\r\n    yield put (signInSuccess({ id:userSnapShot.id,...userSnapShot.data() }) );\r\n    } catch (error) {\r\n        yield put( signInFailure(error) );\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\ntry{\r\n    const {user} = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapShotFromUserAuth(user);\r\n    } catch (error) {\r\n        yield put( signInFailure(error) );\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail( {payload : {email,password}} ) {\r\n    try{\r\n        const {user} = yield auth.signInWithEmailAndPassword(email,password);\r\n        yield getSnapShotFromUserAuth(user);\r\n        } catch (error) {\r\n            yield put( signInFailure(error) );\r\n        }\r\n    }\r\n\r\nexport function* isUserAuthenticated(){\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if (!userAuth) return;\r\n        yield getSnapShotFromUserAuth(userAuth);\r\n    } catch (error){\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signOut(){\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess());\r\n    } catch (error) {\r\n        yield put(signOutFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signUp({ payload: {email, password, displayName} }){\r\n    try {\r\n        const {user} = yield auth.createUserWithEmailAndPassword(email,password);\r\n        yield put (signUpSuccess({ user, additionalData :{displayName} }));\r\n    } catch (error) { \r\n        yield put(signUpFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signInAfterSignUp({payload : {user,additionalData} }){\r\n    yield getSnapShotFromUserAuth(user,additionalData);\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle );\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START ,signInWithEmail );\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated);\r\n}\r\n\r\nexport function* onSignOutStart (){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START,signOut);\r\n}\r\n\r\nexport function* onSignUpStart (){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START,signUp);\r\n}\r\n\r\nexport function* onSignUpSuccess (){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\r\n}\r\n\r\nexport function* userSagas(){\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart),\r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess)\r\n     ]);\r\n}"]},"metadata":{},"sourceType":"module"}